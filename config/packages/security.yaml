#security:
#  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#  password_hashers:
#    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#  providers:
#    users_in_memory: { memory: null }
#    # used to reload user from session & other features (e.g. switch_user)
#    app_user_provider:
#      entity:
#        class: App\Entity\User
#        property: email
#  firewalls:
#    dev:
#      pattern: ^/(_(profiler|wdt)|css|images|js)/
#      security: false
#    login:
#      pattern: ^/api/login
#      stateless: true
#      provider: app_user_provider
#      json_login:
#        check_path: /api/login
#        username_path: email
#        password_path: password
#        success_handler: lexik_jwt_authentication.handler.authentication_success
#        failure_handler: lexik_jwt_authentication.handler.authentication_failure
#    api:
#      pattern: ^/api
#      stateless: true
#    main:
#      lazy: true
#      provider: users_in_memory
#
#      # activate different ways to authenticate
#      # https://symfony.com/doc/current/security.html#the-firewall
#
#      # https://symfony.com/doc/current/security/impersonating_user.html
#      # switch_user: true
#
#  # Easy way to control access for large sections of your site
#  # Note: Only the *first* access control that matches will be used
#  access_control:
#    { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    { path: ^/user, roles: ROLE_ADMIN }
#    { path: ^/workout/session, roles: ROLE_TRAINER }
#
#when@test:
#  security:
#    password_hashers:
#      # By default, password hashers are resource intensive and take time. This is
#      # important to generate secure password hashes. In tests however, secure hashes
#      # are not important, waste resources and increase test times. The following
#      # reduces the work factor to the lowest possible values.
#      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#        algorithm: auto
#        cost: 4 # Lowest possible value for bcrypt
#        time_cost: 3 # Lowest possible value for argon
#        memory_cost: 10 # Lowest possible value for argon



security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

  providers:
    users_in_memory: { memory: null }

    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true

    main:
      lazy: true
      provider: users_in_memory

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/user, roles: ROLE_ADMIN }

    - { path: ^/booking/new, roles: ROLE_USER }
    - { path: ^/booking/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/booking/{id}, roles: ROLE_USER }
    - { path: ^/booking/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/booking, roles: ROLE_USER }


    - { path: ^/destination/new, roles: ROLE_ADMIN }
    - { path: ^/destination/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/destination/, roles: ROLE_USER }
    - { path: ^/destination/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/destination, roles: ROLE_USER }

    - { path: ^/guide/new, roles: ROLE_ADMIN }
    - { path: ^/guide/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/guide/{id}, roles: ROLE_USER }
    - { path: ^/guide/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/guide, roles: ROLE_USER }


    - { path: ^/payment/new, roles: ROLE_ADMIN }
    - { path: ^/payment/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/payment/{id}, roles: ROLE_USER }
    - { path: ^/payment/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/payment, roles: ROLE_USER }


    - { path: ^/payment_method/new, roles: ROLE_ADMIN }
    - { path: ^/payment_method/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/payment_method/{id}, roles: ROLE_USER }
    - { path: ^/payment_method/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/payment_method, roles: ROLE_USER }

    - { path: ^/review/new, roles: ROLE_USER }
    - { path: ^/review/edit/{id}, roles: ROLE_USER }
    - { path: ^/review/{id}, roles: ROLE_USER }
    - { path: ^/review/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/review, roles: ROLE_USER }


    - { path: ^/tour/new, roles: ROLE_ADMIN }
    - { path: ^/tour/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/tour/{id}, roles: ROLE_USER }
    - { path: ^/tour/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/tour, roles: ROLE_USER }

    - { path: ^/tour_guide/new, roles: ROLE_ADMIN }
    - { path: ^/tour_guide/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/tour_guide/{id}, roles: ROLE_USER }
    - { path: ^/tour_guide/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/tour_guide, roles: ROLE_USER }

    - { path: ^/tourist/new, roles: ROLE_ADMIN }
    - { path: ^/tourist/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/tourist/{id}, roles: ROLE_USER }
    - { path: ^/tourist/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/tourist, roles: ROLE_USER }

    - { path: ^/user_role/new, roles: ROLE_ADMIN }
    - { path: ^/user_role/edit/{id}, roles: ROLE_ADMIN }
    - { path: ^/user_role/{id}, roles: ROLE_SUPER_ADMIN }
    - { path: ^/user_role/{id}, roles: ROLE_ADMIN, methods: DELETE }
    - { path: ^/user_role, roles: ROLE_ADMIN }



when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon